======================
Changes in version 1.0
======================

This page lists all significant changes made between versions 0.9 and 1.0 of
Fabric.

* `~fabric.contrib.files.contains` and `~fabric.contrib.files.append`
  previously had the ``filename`` argument in the second position, whereas all
  other functions in the module had ``filename`` as the first argument. In 1.0,
  these two functions were brought in line with the rest of
  `~fabric.contrib.files`.
* `~fabric.operations.sudo`'s signature used to be ``sudo(command, shell, user,
  pty)``; to be consistent with `~fabric.operations.run`, the last two kwargs
  have been swapped: its signature is now ``sudo(command, shell, pty, user)``.
* The `~fabric.operations.reboot` operation has been added, providing a way for
  Fabric to issue a reboot command and then reconnect after the system has
  restarted.
* Added a `~fabric.utils.fastprint` utility function equivalent to
  ``sys.stdout.write(text); sys.stdout.flush()``.
* `~fabric.operations.local` now returns the same "rich" string object as
  `~fabric.operations.run`/`~fabric.operations.sudo` do, so that it is a
  string containing the command's stdout (if ``capture=True``) or the empty
  string (if ``capture=False) which exposes the ``.failed``
  and ``.return_code`` attributes, and so forth.
* Fixed a bug where Fabric's own internal fabfile would pre-empt the user's
  fabfile due to a PYTHONPATH order issue. User fabfiles are now always loaded
  at the front of the PYTHONPATH during import.
* :option:`fab -d <-d>` now displays a well formatted message for tasks that
  have no docstring defined.
* `~fabric.operations.local` now honors `~fabric.context_managers.cd`.
* Added functionality for loading fabfiles which are Python packages
  (directories) instead of just modules (single files.) See
  :ref:`fabfile-discovery`.
* Disabled some DeprecationWarnings thrown by Paramiko when that library is
  imported into Fabric under Python 2.6.
* Added support for arbitrary command-line-driven anonymous tasks via ``fab
  [options] -- [shell command]``. See :ref:`arbitrary-commands`.
* Full tracebacks during aborts are now displayed if the user has opted to see
  debug-level output. Fixes `#52 <http://code.fabfile.org/issues/show/52>`_.
* `~fabric.operations.run`, `~fabric.operations.sudo` and
  `~fabric.operations.local` now provide access to their standard error
  (stderr) as an attribute on the return value, alongside e.g. ``.failed``.
  Fixes `#55 <http://code.fabfile.org/issues/show/55>`_.
* Added output lines informing the user of which tasks are being executed (e.g.
  ``[myserver] Executing task 'foo'``.)
* Added `~fabric.context_managers.path` context manager for modifying commands'
  effective ``$PATH``.
* Added support for lazy (callable) role definition values in ``env.roledefs``.
* Added environment variable (:ref:`always-use-pty`) and command-line flag
  (:option:`--pty`) for global control over the
  `~fabric.operations.run`/`~fabric.operations.sudo` ``pty`` argument.
* Added convenience ``.succeeded`` attribute to the return values of
  `~fabric.operations.run`/`~fabric.operations.sudo`/`~fabric.operations.local`
  which is simply the opposite of the ``.failed`` attribute.
* Added `contrib.django <fabric.contrib.django>` module with basic Django
  integration.
* Added `~fabric.colors` module with basic color output support.
* Modified `~fabric.contrib.project.rsync_project` to honor existing SSH port
  and identity file settings. Thanks to Mitch Matuson and Morgan Goose.
* Added `~fabric.context_managers.prefix` context manager for easier management
  of persistent state across commands.
* Refactored SSH disconnection code out of the main ``fab`` loop into
  `~fabric.network.disconnect_all`, allowing library users to avoid problems
  with non-fabfile Python scripts hanging after execution finishes.
* Various other minor bugfixes and code tweaks.
